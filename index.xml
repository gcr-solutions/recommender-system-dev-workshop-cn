<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Recommender System Solution Workshop (Beijing/Ningxia Region) on Recommender System Solution</title><link>https://gcr-solutions.github.io/recommender-system-dev-workshop-cn/</link><description>Recent content in Recommender System Solution Workshop (Beijing/Ningxia Region) on Recommender System Solution</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://gcr-solutions.github.io/recommender-system-dev-workshop-cn/index.xml" rel="self" type="application/rss+xml"/><item><title>AWS Cloud9</title><link>https://gcr-solutions.github.io/recommender-system-dev-workshop-cn/prerequisite/workspace/cloud9/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gcr-solutions.github.io/recommender-system-dev-workshop-cn/prerequisite/workspace/cloud9/readme/</guid><description>AWS Cloud9 is a cloud-based integrated development environment (IDE) that lets you write, run, and debug your code with just a browser. It includes a code editor, debugger, and terminal.
Create new Cloud9 IDE environment Go to AWS Cloud9 Console
Use the region drop list to select Asia Pacific (Tokyo)ap-northeast-1
Click Create environment button to create an cloud9 environment
Name it gcr-rs-dev-workshop, click Next</description></item><item><title>Install eksctl</title><link>https://gcr-solutions.github.io/recommender-system-dev-workshop-cn/prerequisite/tools/eksctl/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gcr-solutions.github.io/recommender-system-dev-workshop-cn/prerequisite/tools/eksctl/readme/</guid><description>eksctl is a command line tool for working with EKS clusters that automates many individual tasks. For this workshop you will use a eksctl. Once you install eksctl, you will be ready to get started.
At the terminal command prompt, enter the following two commands:
curl --silent --location &amp;#34;https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz&amp;#34; | tar xz -C /tmp sudo mv /tmp/eksctl /usr/local/bin This will install eksctl in your Cloud9 environment. To test to make sure the command is installed properly, execute the command:</description></item><item><title>Create An IAM Role For Your Workspace</title><link>https://gcr-solutions.github.io/recommender-system-dev-workshop-cn/prerequisite/workspace/create-role/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gcr-solutions.github.io/recommender-system-dev-workshop-cn/prerequisite/workspace/create-role/readme/</guid><description>You need to create an IAM role for Cloud9 service, this IAM role complies with the Principle of least privilege. It contains the following AWS servicesï¼š
AWS IAM AMAZON S3 AMAZON EKS AWS SecretsManager AWS CodeBuild AWS EFS AWS EC2 AWS Elasticache AWS CloudWatch AWS AutoScaling AWS SSM AWS KMS AWS AutoScaling AWS CloudFormation Click the Link, Copy the content in the gcr-rs-role.json file.</description></item><item><title>Install kubectl</title><link>https://gcr-solutions.github.io/recommender-system-dev-workshop-cn/prerequisite/tools/kubectl/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gcr-solutions.github.io/recommender-system-dev-workshop-cn/prerequisite/tools/kubectl/readme/</guid><description>The Kubernetes command-line tool, kubectl, allows you to run commands against Kubernetes clusters. You can use kubectl to deploy applications, inspect and manage cluster resources, and view logs.
At the terminal command prompt, enter the following two commands:
curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl chmod +x ./kubectl sudo mv ./kubectl /usr/local/bin/kubectl This will install kubectl in your Cloud9 environment. To test to make sure the command is installed properly, execute the command:</description></item><item><title>Attach The IAM Role To Your Workspace</title><link>https://gcr-solutions.github.io/recommender-system-dev-workshop-cn/prerequisite/workspace/attach-role/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gcr-solutions.github.io/recommender-system-dev-workshop-cn/prerequisite/workspace/attach-role/readme/</guid><description> In the Cloud9 workspace, click the grey circle button (in top right corner) and select Manage EC2 Instance.
EC2 dashboard will be opened, select the &amp;ldquo;aws-cloud9-gcr-rs-dev-workshop-xxx&amp;rdquo; instance, then choose Actions / Security / Modify IAM Role
Choose gcr-rs-dev-workshop-admin from the IAM Role drop down, and select Save</description></item><item><title>Update IAM Settings For Your Workspace</title><link>https://gcr-solutions.github.io/recommender-system-dev-workshop-cn/prerequisite/workspace/update-role-settings/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gcr-solutions.github.io/recommender-system-dev-workshop-cn/prerequisite/workspace/update-role-settings/readme/</guid><description>Cloud9 normally manages IAM credentials dynamically. This isn&amp;rsquo;t currently compatible with the EKS IAM authentication, so we will disable it and rely on the IAM role instead.
Go to your Cloud9 workspace and click the gear icon (in top right corner)
Select AWS SETTINGS
Turn off AWS managed temporary credentials
Close the Preferences tab
Install jq
sudo yum -y install jq To ensure temporary credentials aren&amp;rsquo;t already in place we will also remove any existing credentials file:</description></item><item><title>Create An SSH Key</title><link>https://gcr-solutions.github.io/recommender-system-dev-workshop-cn/prerequisite/workspace/create-ssh-key/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gcr-solutions.github.io/recommender-system-dev-workshop-cn/prerequisite/workspace/create-ssh-key/readme/</guid><description>Please run this command to generate SSH Key in Cloud9. This key will be used on the worker node instances to allow ssh access if necessary.
ssh-keygen Press enter 3 times to take the default choices
Upload the public key to your EC2 region:
aws ec2 import-key-pair --key-name &amp;#34;gcr-rs-dev-workshop-key&amp;#34; --public-key-material file://~/.ssh/id_rsa.pub</description></item><item><title>Setup GitHub Account In Cloud9 Workspace</title><link>https://gcr-solutions.github.io/recommender-system-dev-workshop-cn/prerequisite/workspace/setup-github-config/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gcr-solutions.github.io/recommender-system-dev-workshop-cn/prerequisite/workspace/setup-github-config/readme/</guid><description>Set up git with your username and email through following commands, please replace Your name here and your_email@example.com with your Github account.
git config --global user.name &amp;quot;Your name here&amp;quot;
git config --global user.email &amp;quot;your_email@example.com&amp;quot;
Set up ssh on your cloud9 workspace.
Enter the following command to check if you have files ~/.ssh/id_rsa and ~/.ssh/id_rsa.pub.
ls ~/.ssh If you do not have, please follow Create an SSH key to create such public/private keys.</description></item><item><title>Config AWS profile to access China region</title><link>https://gcr-solutions.github.io/recommender-system-dev-workshop-cn/prerequisite/workspace/cn-profile/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gcr-solutions.github.io/recommender-system-dev-workshop-cn/prerequisite/workspace/cn-profile/readme/</guid><description>Create an AWS profile in Cloud9 to access China region Go to China region AWS console https://console.amazonaws.cn/iamv2/home?#/users
Create an IAM user with policy
Record the Access key ID and Secret access key
In the Cloud9 terminal, config an AWS profile rs-dev-workshop-cn, set region: cn-north-1
aws configure --profile rs-dev-workshop-cn Export the profile name as Env export CN_AWS_PROFILE=rs-dev-workshop-cn echo &amp;#34;export CN_AWS_PROFILE=${CN_AWS_PROFILE}&amp;#34; | tee -a ~/.</description></item><item><title>Create ECR user in China region</title><link>https://gcr-solutions.github.io/recommender-system-dev-workshop-cn/prerequisite/workspace/cn-region-ecr-user/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gcr-solutions.github.io/recommender-system-dev-workshop-cn/prerequisite/workspace/cn-region-ecr-user/readme/</guid><description>Create IAM user with ECR access only in China region (cn-north-1) Go to China region AWS console https://console.amazonaws.cn/iamv2/home?#/users
Add User, name: rs-dev-workshop-cn-ecr-user, check Programmatic access Chose policy AmazonEC2ContainerRegistryFullAccess Review and Create the user
Record the Access key ID and Secret access key In cloud9 terminal, execute below commands:
CN_AWS_ACCESS_KEY_ID=&amp;lt;the Access key ID&amp;gt; CN_AWS_SECRET_ACCESS_KEY=&amp;lt;the Secret access key&amp;gt; aws ssm put-parameter --type SecureString --name gcr-rs-dev-workshop-CN_AWS_ACCESS_KEY_ID --value $CN_AWS_ACCESS_KEY_ID aws ssm put-parameter --type SecureString --name gcr-rs-dev-workshop-CN_AWS_SECRET_ACCESS_KEY --value $CN_AWS_SECRET_ACCESS_KEY</description></item><item><title>Install kustomize</title><link>https://gcr-solutions.github.io/recommender-system-dev-workshop-cn/prerequisite/tools/kustomize/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gcr-solutions.github.io/recommender-system-dev-workshop-cn/prerequisite/tools/kustomize/readme/</guid><description>Install Kustomize Kustomize lets you customize raw, template-free YAML files for multiple purposes, leaving the original YAML untouched and usable as is.
Install kustomize for Linux:
curl --silent --location --remote-name \ &amp;#34;https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize/v3.2.3/kustomize_kustomize.v3.2.3_linux_amd64&amp;#34; &amp;amp;&amp;amp; \ chmod a+x kustomize_kustomize.v3.2.3_linux_amd64 &amp;amp;&amp;amp; \ sudo mv kustomize_kustomize.v3.2.3_linux_amd64 /usr/local/bin/kustomize Verify the install with:
kustomize version You should see the message like below:</description></item><item><title>Develop Online Of Recommender System</title><link>https://gcr-solutions.github.io/recommender-system-dev-workshop-cn/develop-experience/4_develop_online/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gcr-solutions.github.io/recommender-system-dev-workshop-cn/develop-experience/4_develop_online/readme/</guid><description>In this part, you&amp;rsquo;ll change some code to add two features in online part, and then deploy them to your Recommender System.
Add hot topic Open recommender-system-dev-workshop-code/src/filter/plugins/news/service.py file
Go to line 355 and uncomment below code.
# hot_topic_news_list = self.get_hot_topic_news_list(user_id, hot_topic_count, present_recommend_news_id_list, recommended_news_list) Push your change to your github repo
cd /home/ec2-user/environment/recommender-system-dev-workshop-code/src/filter/plugins/news git pull git add service.py git commit -m &amp;quot;test for online development&amp;quot; git push Go to codebuild project to check gcr-rs-dev-workshop-filter-build, it should be triggered.</description></item><item><title>Develop Offline Of Recommender System</title><link>https://gcr-solutions.github.io/recommender-system-dev-workshop-cn/develop-experience/5_develop_offline/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gcr-solutions.github.io/recommender-system-dev-workshop-cn/develop-experience/5_develop_offline/readme/</guid><description>Experience recall logic Experience recall without keywords Open recall log GUI
Click 4 ~ 5 news in the recommended list
View recall log in argo GUI
Experience recall with keywords Run below script to change recall config file:
cd /home/ec2-user/environment/recommender-system-dev-workshop-code/scripts ./change-recall-config-offline.sh The old config file:
The new config file:
The recall config file has been changed and offline notified online to load new config file.</description></item></channel></rss>